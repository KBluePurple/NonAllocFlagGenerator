#nullable enable

using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace NonAllocFlags.Generator
{
    [Generator]
    public class FlagExtensionsIncrementalGenerator : IIncrementalGenerator
    {
        private const string FullAttributeName = "NonAllocFlag.NonAllocFlagGeneratorAttribute";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var assemblyHasAttributeProvider = context.CompilationProvider.Select((compilation, _) =>
                compilation.Assembly.GetAttributes()
                    .Any(attr => attr.AttributeClass?.ToDisplayString() == FullAttributeName));

            var enumDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => s is EnumDeclarationSyntax,
                    transform: static (ctx, _) => GetEnumDeclarationForSourceGen(ctx)
                )
                .Where(static m => m is not null)
                .Collect();

            IncrementalValueProvider<(Compilation, ImmutableArray<EnumDeclarationSyntax>)> compilationAndEnums =
                context.CompilationProvider.Combine(enumDeclarations)!;

            var combinedProvider = compilationAndEnums.Combine(assemblyHasAttributeProvider);

            context.RegisterSourceOutput(combinedProvider, (spc, source) =>
            {
                var ((compilation, enums), hasAttribute) = source;

                if (!hasAttribute)
                {
                    return;
                }

                Execute(spc, (compilation, enums));
            });
        }

        private static EnumDeclarationSyntax? GetEnumDeclarationForSourceGen(GeneratorSyntaxContext context)
        {
            var enumDeclaration = (EnumDeclarationSyntax)context.Node;

            return enumDeclaration.AttributeLists
                .SelectMany(al => al.Attributes).Any(a => a.Name.ToString() is "Flags" or "FlagsAttribute")
                ? enumDeclaration
                : null;
        }

        private static void Execute(SourceProductionContext context,
            (Compilation compilation, ImmutableArray<EnumDeclarationSyntax> enums) source)
        {
            var (compilation, enums) = source;

            if (enums.IsDefaultOrEmpty)
            {
                return;
            }

            var extensionMethods = new[]
            {
                (Name: "HasFlagNonAlloc", Param: "flag", Impl: "return (value & flag) == flag;"),
                (Name: "HasAnyFlag", Param: "flags", Impl: "return (value & flags) != 0;")
            };

            var sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine("// <auto-generated />");
            sourceBuilder.AppendLine("#nullable enable");
            sourceBuilder.AppendLine("using System;");
            sourceBuilder.AppendLine("using System.Runtime.CompilerServices;");
            sourceBuilder.AppendLine();
            sourceBuilder.AppendLine(
                "[System.CodeDom.Compiler.GeneratedCodeAttribute(\"NonAllocFlags.Generator\", \"1.0.0.0\")]");
            sourceBuilder.AppendLine("public static class FlagExtensionsGenerated");
            sourceBuilder.AppendLine("{");

            var processedCount = 0;

            foreach (var enumDeclaration in enums.Distinct())
            {
                context.CancellationToken.ThrowIfCancellationRequested();

                var model = compilation.GetSemanticModel(enumDeclaration.SyntaxTree);
                if (!(model.GetDeclaredSymbol(enumDeclaration,
                        context.CancellationToken) is INamedTypeSymbol enumSymbol))
                    continue;

                if (!IsFlagsEnum(enumSymbol))
                    continue;

                var accessibility = GetEffectiveAccessibility(enumSymbol);
                if (accessibility != Accessibility.Public && accessibility != Accessibility.Internal)
                    continue;

                var enumPath = enumSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var accessModifier = accessibility == Accessibility.Public ? "public" : "internal";

                foreach (var method in extensionMethods)
                {
                    AddExtensionMethod(sourceBuilder, accessModifier, enumPath, method.Name, method.Param, method.Impl);
                }

                processedCount++;
            }

            sourceBuilder.AppendLine("}");

            if (processedCount > 0)
            {
                context.AddSource("FlagExtensions.g.cs", sourceBuilder.ToString());
            }
        }

        private static bool IsFlagsEnum(INamedTypeSymbol enumSymbol)
        {
            return enumSymbol is { TypeKind: TypeKind.Enum } &&
                   enumSymbol.GetAttributes().Any(ad =>
                       ad.AttributeClass?.ContainingNamespace?.ToDisplayString() == "System" &&
                       ad.AttributeClass.Name == "FlagsAttribute");
        }

        private static Accessibility GetEffectiveAccessibility(ISymbol symbol)
        {
            var currentAccessibility = symbol.DeclaredAccessibility;
            var container = symbol.ContainingSymbol;

            while (container != null && container is not INamespaceSymbol)
            {
                if (container.DeclaredAccessibility < currentAccessibility)
                {
                    currentAccessibility = container.DeclaredAccessibility;
                }

                container = container.ContainingSymbol;
            }

            return currentAccessibility switch
            {
                Accessibility.Private => Accessibility.Private,
                Accessibility.ProtectedAndInternal => Accessibility.Internal,
                Accessibility.Protected => Accessibility.Internal,
                Accessibility.Internal => Accessibility.Internal,
                Accessibility.ProtectedOrInternal => Accessibility.Internal,
                Accessibility.Public => Accessibility.Public,
                _ => Accessibility.NotApplicable
            };
        }


        private static void AddExtensionMethod(
            StringBuilder builder,
            string accessModifier,
            string enumPath,
            string methodName,
            string paramName,
            string implementation)
        {
            builder.AppendLine();
            builder.AppendLine("    [MethodImpl(MethodImplOptions.AggressiveInlining)]");
            builder.AppendLine(
                $"    {accessModifier} static bool {methodName}(this {enumPath} value, {enumPath} {paramName})");
            builder.AppendLine("    {");
            builder.AppendLine($"        {implementation}");
            builder.AppendLine("    }");
        }
    }
}