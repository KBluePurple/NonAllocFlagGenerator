#nullable enable

using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace NonAllocFlags.Generator
{
    [Generator]
    public class FlagExtensionsIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var enumDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => s is EnumDeclarationSyntax,
                    transform: static (ctx, _) => GetEnumDeclarationForSourceGen(ctx)
                )
                .Where(static m => m is not null)
                .Collect();

            IncrementalValueProvider<(Compilation, ImmutableArray<EnumDeclarationSyntax>)> compilationAndEnums =
                context.CompilationProvider.Combine(enumDeclarations)!;

            context.RegisterSourceOutput(compilationAndEnums, Execute);
        }

        private static EnumDeclarationSyntax? GetEnumDeclarationForSourceGen(GeneratorSyntaxContext context)
        {
            var enumDeclaration = (EnumDeclarationSyntax)context.Node;

            return enumDeclaration.AttributeLists
                .SelectMany(al => al.Attributes).Any(a => a.Name.ToString() is "Flags" or "FlagsAttribute")
                ? enumDeclaration
                : null;
        }

        private static bool IsEnumInOpenGenericContext(INamedTypeSymbol enumSymbol)
        {
            INamedTypeSymbol? containingType = enumSymbol.ContainingType;
            while (containingType != null)
            {
                if (containingType.IsGenericType)
                {
                    foreach (var typeArgument in containingType.TypeArguments)
                    {
                        if (typeArgument is ITypeParameterSymbol typeParamSymbolArg)
                        {
                            if (containingType.TypeParameters.Contains(typeParamSymbolArg,
                                    SymbolEqualityComparer.Default))
                            {
                                return true;
                            }
                        }
                    }
                }

                containingType = containingType.ContainingType;
            }

            return false;
        }

        private static void Execute(SourceProductionContext context,
            (Compilation compilation, ImmutableArray<EnumDeclarationSyntax> enums) source)
        {
            var (compilation, enums) = source;

            if (enums.IsDefaultOrEmpty)
            {
                return;
            }

            var extensionMethods = new[]
            {
                (Name: "HasFlagNonAlloc", Param: "flag", Impl: "return (value & flag) == flag;"),
                (Name: "HasAnyFlag", Param: "flags", Impl: "return (value & flags)!= 0;")
            };

            var sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine("// <auto-generated />");
            sourceBuilder.AppendLine("#nullable enable");
            sourceBuilder.AppendLine("using System;");
            sourceBuilder.AppendLine("using System.Runtime.CompilerServices;");
            sourceBuilder.AppendLine();
            sourceBuilder.AppendLine(
                "");
            sourceBuilder.AppendLine("public static class FlagExtensionsGenerated");
            sourceBuilder.AppendLine("{");

            var processedCount = 0;

            foreach (var enumDeclaration in enums.Distinct())
            {
                context.CancellationToken.ThrowIfCancellationRequested();

                var model = compilation.GetSemanticModel(enumDeclaration.SyntaxTree);
                if (!(model.GetDeclaredSymbol(enumDeclaration,
                        context.CancellationToken) is INamedTypeSymbol enumSymbol))
                    continue;

                if (!IsFlagsEnum(enumSymbol))
                    continue;

                // Skip enums in open generic contexts to prevent CS0246
                if (IsEnumInOpenGenericContext(enumSymbol))
                {
                    // Optional: Report diagnostic
                    continue;
                }

                // Determine the true effective accessibility of the enum symbol
                var effectiveAccessibilityOfEnum = GetEffectiveAccessibility(enumSymbol);

                string extensionMethodModifier;

                // Decide if the enum is accessible enough to generate methods for it,
                // and determine the modifier for the extension method.
                switch (effectiveAccessibilityOfEnum)
                {
                    case Accessibility.Public:
                        extensionMethodModifier = "public";
                        break;
                    case Accessibility.Internal: // C# internal
                    case Accessibility.ProtectedOrInternal: // C# protected internal
                        // Both 'internal' and 'protected internal' enums are accessible
                        // by an 'internal' extension method in the same assembly.
                        extensionMethodModifier = "internal";
                        break;

                    // These effective accessibilities mean the enum type cannot be legally
                    // named as a parameter by FlagExtensionsGenerated (a separate top-level class).
                    case Accessibility.Private:
                    case Accessibility.Protected: // C# protected
                    case Accessibility.ProtectedAndInternal: // C# private protected
                    case Accessibility.NotApplicable:
                    default:
                        // Optional: Report diagnostic for skipping due to accessibility
                        continue; // Skip this enum
                }

                var enumPath = enumSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

                foreach (var method in extensionMethods)
                {
                    AddExtensionMethod(sourceBuilder, extensionMethodModifier, enumPath, method.Name, method.Param,
                        method.Impl);
                }

                processedCount++;
            }

            sourceBuilder.AppendLine("}");

            if (processedCount > 0)
            {
                context.AddSource($"{source.compilation.AssemblyName}.FlagExtensions.g.cs", sourceBuilder.ToString());
            }
        }

        private static bool IsFlagsEnum(INamedTypeSymbol enumSymbol)
        {
            return enumSymbol is { TypeKind: TypeKind.Enum } &&
                   enumSymbol.GetAttributes().Any(ad =>
                       ad.AttributeClass?.ContainingNamespace?.ToDisplayString() == "System" &&
                       ad.AttributeClass.Name == "FlagsAttribute");
        }

        // This method now returns the true effective accessibility of the symbol,
        // considering its own declared accessibility and that of its containers.
        private static Accessibility GetEffectiveAccessibility(ISymbol symbol)
        {
            var mostRestrictiveAccessibility = symbol.DeclaredAccessibility;
            var container = symbol.ContainingSymbol;

            while (container != null && container is not INamespaceSymbol)
            {
                // Accessibility enum values are ordered such that numerically smaller is more restrictive.
                // Private = 1, ProtectedAndInternal = 2, Protected = 3, Internal = 4, ProtectedOrInternal = 5, Public = 6
                if (container.DeclaredAccessibility < mostRestrictiveAccessibility)
                {
                    mostRestrictiveAccessibility = container.DeclaredAccessibility;
                }

                container = container.ContainingSymbol;
            }

            return mostRestrictiveAccessibility;
        }

        private static void AddExtensionMethod(
            StringBuilder builder,
            string accessModifier,
            string enumPath,
            string methodName,
            string paramName,
            string implementation)
        {
            builder.AppendLine();
            builder.AppendLine("    [MethodImpl(MethodImplOptions.AggressiveInlining)]");
            builder.AppendLine(
                $"    {accessModifier} static bool {methodName}(this {enumPath} value, {enumPath} {paramName})");
            builder.AppendLine("    {");
            builder.AppendLine($"        {implementation}");
            builder.AppendLine("    }");
        }
    }
}